!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BASHCOMMAND_H	BashCommand.h	21;"	d
BashCommand	BashCommand.cpp	/^BashCommand::BashCommand ( std::string &command ) {$/;"	f	class:BashCommand	signature:( std::string &command )
BashCommand	BashCommand.h	/^    BashCommand ( std::string &command );$/;"	p	class:BashCommand	access:public	signature:( std::string &command )
BashCommand	BashCommand.h	/^class BashCommand {$/;"	c
BashCommand::BashCommand	BashCommand.cpp	/^BashCommand::BashCommand ( std::string &command ) {$/;"	f	class:BashCommand	signature:( std::string &command )
BashCommand::BashCommand	BashCommand.h	/^    BashCommand ( std::string &command );$/;"	p	class:BashCommand	access:public	signature:( std::string &command )
BashCommand::command	BashCommand.h	/^    std::string command;$/;"	m	class:BashCommand	access:private
BashCommand::execute	BashCommand.cpp	/^std::string BashCommand::execute()$/;"	f	class:BashCommand	signature:()
BashCommand::execute	BashCommand.h	/^    virtual std::string  execute();$/;"	p	class:BashCommand	access:public	signature:()
BashCommand::~BashCommand	BashCommand.cpp	/^BashCommand::~BashCommand()$/;"	f	class:BashCommand	signature:()
BashCommand::~BashCommand	BashCommand.h	/^    virtual ~BashCommand();$/;"	p	class:BashCommand	access:public	signature:()
COMPILER_H	Compiler.h	21;"	d
Compiler	Compiler.cpp	/^Compiler::Compiler ( ) {$/;"	f	class:Compiler	signature:( )
Compiler	Compiler.h	/^    Compiler ();$/;"	p	class:Compiler	access:public	signature:()
Compiler	Compiler.h	/^class Compiler {$/;"	c
Compiler::Compiler	Compiler.cpp	/^Compiler::Compiler ( ) {$/;"	f	class:Compiler	signature:( )
Compiler::Compiler	Compiler.h	/^    Compiler ();$/;"	p	class:Compiler	access:public	signature:()
Compiler::bashCommand	Compiler.h	/^    BashCommand *bashCommand;$/;"	m	class:Compiler	access:private
Compiler::commands	Compiler.h	/^    std::vector<std::string> commands;$/;"	m	class:Compiler	access:private
Compiler::execute	Compiler.cpp	/^void Compiler::execute() {$/;"	f	class:Compiler	signature:()
Compiler::execute	Compiler.h	/^    virtual void  execute();$/;"	p	class:Compiler	access:public	signature:()
Compiler::parser	Compiler.h	/^    Parser *parser;$/;"	m	class:Compiler	access:private
Compiler::~Compiler	Compiler.cpp	/^Compiler::~Compiler() {$/;"	f	class:Compiler	signature:()
Compiler::~Compiler	Compiler.h	/^    virtual ~Compiler();$/;"	p	class:Compiler	access:public	signature:()
EVENT_BUF_LEN	Notifier.h	/^    int EVENT_BUF_LEN;$/;"	m	class:Notifier	access:private
EVENT_SIZE	Notifier.h	/^    int EVENT_SIZE;$/;"	m	class:Notifier	access:private
MONITOR_H	Monitor.h	21;"	d
Monitor	Monitor.cpp	/^Monitor::Monitor ( ) {$/;"	f	class:Monitor	signature:( )
Monitor	Monitor.cpp	/^Monitor::Monitor ( Compiler &compiler, Notifier &notifier, TestSuite &testSuite ) {$/;"	f	class:Monitor	signature:( Compiler &compiler, Notifier &notifier, TestSuite &testSuite )
Monitor	Monitor.h	/^    Monitor ( );$/;"	p	class:Monitor	access:public	signature:( )
Monitor	Monitor.h	/^    Monitor ( Compiler &compiler, Notifier &notifier, TestSuite &testSuite );$/;"	p	class:Monitor	access:public	signature:( Compiler &compiler, Notifier &notifier, TestSuite &testSuite )
Monitor	Monitor.h	/^class Monitor {$/;"	c
Monitor::Monitor	Monitor.cpp	/^Monitor::Monitor ( ) {$/;"	f	class:Monitor	signature:( )
Monitor::Monitor	Monitor.cpp	/^Monitor::Monitor ( Compiler &compiler, Notifier &notifier, TestSuite &testSuite ) {$/;"	f	class:Monitor	signature:( Compiler &compiler, Notifier &notifier, TestSuite &testSuite )
Monitor::Monitor	Monitor.h	/^    Monitor ( );$/;"	p	class:Monitor	access:public	signature:( )
Monitor::Monitor	Monitor.h	/^    Monitor ( Compiler &compiler, Notifier &notifier, TestSuite &testSuite );$/;"	p	class:Monitor	access:public	signature:( Compiler &compiler, Notifier &notifier, TestSuite &testSuite )
Monitor::compiler	Monitor.h	/^    Compiler *compiler;$/;"	m	class:Monitor	access:private
Monitor::isValid	Monitor.cpp	/^bool Monitor::isValid() {$/;"	f	class:Monitor	signature:()
Monitor::isValid	Monitor.h	/^    virtual bool isValid();$/;"	p	class:Monitor	access:public	signature:()
Monitor::notifier	Monitor.h	/^    Notifier *notifier;$/;"	m	class:Monitor	access:private
Monitor::startWatch	Monitor.cpp	/^void Monitor::startWatch() {$/;"	f	class:Monitor	signature:()
Monitor::startWatch	Monitor.h	/^    virtual void startWatch();$/;"	p	class:Monitor	access:public	signature:()
Monitor::testSuite	Monitor.h	/^    TestSuite *testSuite;$/;"	m	class:Monitor	access:private
Monitor::~Monitor	Monitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:Monitor	signature:()
Monitor::~Monitor	Monitor.h	/^    virtual ~Monitor();$/;"	p	class:Monitor	access:public	signature:()
NOTIFIER_H	Notifier.h	21;"	d
Notifier	Notifier.cpp	/^Notifier::Notifier() {$/;"	f	class:Notifier	signature:()
Notifier	Notifier.h	/^    Notifier();$/;"	p	class:Notifier	access:public	signature:()
Notifier	Notifier.h	/^class Notifier {$/;"	c
Notifier::EVENT_BUF_LEN	Notifier.h	/^    int EVENT_BUF_LEN;$/;"	m	class:Notifier	access:private
Notifier::EVENT_SIZE	Notifier.h	/^    int EVENT_SIZE;$/;"	m	class:Notifier	access:private
Notifier::Notifier	Notifier.cpp	/^Notifier::Notifier() {$/;"	f	class:Notifier	signature:()
Notifier::Notifier	Notifier.h	/^    Notifier();$/;"	p	class:Notifier	access:public	signature:()
Notifier::addPath	Notifier.cpp	/^void Notifier::addPath ( std::string &path ) {$/;"	f	class:Notifier	signature:( std::string &path )
Notifier::addPath	Notifier.h	/^    virtual void addPath ( std::string &path );$/;"	p	class:Notifier	access:public	signature:( std::string &path )
Notifier::buffer	Notifier.h	/^    char *buffer;$/;"	m	class:Notifier	access:private
Notifier::fileDescriptor	Notifier.h	/^    int fileDescriptor;$/;"	m	class:Notifier	access:private
Notifier::initialize	Notifier.cpp	/^void Notifier::initialize() {$/;"	f	class:Notifier	signature:()
Notifier::initialize	Notifier.h	/^    virtual void initialize();$/;"	p	class:Notifier	access:public	signature:()
Notifier::length	Notifier.h	/^    int length;$/;"	m	class:Notifier	access:private
Notifier::paths	Notifier.h	/^    std::vector<std::string> paths;$/;"	m	class:Notifier	access:private
Notifier::terminate	Notifier.cpp	/^void Notifier::terminate() {$/;"	f	class:Notifier	signature:()
Notifier::terminate	Notifier.h	/^    virtual void terminate();$/;"	p	class:Notifier	access:public	signature:()
Notifier::waitForChange	Notifier.cpp	/^std::string Notifier::waitForChange() {$/;"	f	class:Notifier	signature:()
Notifier::waitForChange	Notifier.h	/^    std::string waitForChange();$/;"	p	class:Notifier	access:public	signature:()
Notifier::watchDescriptor	Notifier.h	/^    int watchDescriptor;$/;"	m	class:Notifier	access:private
Notifier::~Notifier	Notifier.cpp	/^Notifier::~Notifier() {$/;"	f	class:Notifier	signature:()
Notifier::~Notifier	Notifier.h	/^    virtual ~Notifier();$/;"	p	class:Notifier	access:public	signature:()
PARSER_H	Parser.h	21;"	d
Parser	Parser.cpp	/^Parser::Parser (std::string &text ) {$/;"	f	class:Parser	signature:(std::string &text )
Parser	Parser.h	/^    Parser ( std::string &text );$/;"	p	class:Parser	access:public	signature:( std::string &text )
Parser	Parser.h	/^class Parser {$/;"	c
Parser::Parser	Parser.cpp	/^Parser::Parser (std::string &text ) {$/;"	f	class:Parser	signature:(std::string &text )
Parser::Parser	Parser.h	/^    Parser ( std::string &text );$/;"	p	class:Parser	access:public	signature:( std::string &text )
Parser::run	Parser.cpp	/^void Parser::run( ) {$/;"	f	class:Parser	signature:( )
Parser::run	Parser.h	/^    virtual void run();$/;"	p	class:Parser	access:public	signature:()
Parser::text	Parser.h	/^    std::string text;$/;"	m	class:Parser	access:private
Parser::~Parser	Parser.cpp	/^Parser::~Parser( )$/;"	f	class:Parser	signature:( )
Parser::~Parser	Parser.h	/^    virtual ~Parser();$/;"	p	class:Parser	access:public	signature:()
TESTSUITE_H	TestSuite.h	21;"	d
TEST_H	Test.h	21;"	d
Test	Test.cpp	/^Test::Test ( ) {$/;"	f	class:Test	signature:( )
Test	Test.h	/^    Test ();$/;"	p	class:Test	access:public	signature:()
Test	Test.h	/^class Test {$/;"	c
Test::Test	Test.cpp	/^Test::Test ( ) {$/;"	f	class:Test	signature:( )
Test::Test	Test.h	/^    Test ();$/;"	p	class:Test	access:public	signature:()
Test::execute	Test.cpp	/^void Test::execute() {$/;"	f	class:Test	signature:()
Test::execute	Test.h	/^    virtual void execute();$/;"	p	class:Test	access:public	signature:()
Test::name	Test.h	/^    std::string name;$/;"	m	class:Test	access:private
Test::status	Test.h	/^    bool status;$/;"	m	class:Test	access:private
Test::~Test	Test.cpp	/^Test::~Test ( ) {$/;"	f	class:Test	signature:( )
Test::~Test	Test.h	/^    virtual ~Test();$/;"	p	class:Test	access:public	signature:()
TestSuite	TestSuite.cpp	/^TestSuite::TestSuite ( ) {$/;"	f	class:TestSuite	signature:( )
TestSuite	TestSuite.h	/^    TestSuite ( );$/;"	p	class:TestSuite	access:public	signature:( )
TestSuite	TestSuite.h	/^class TestSuite {$/;"	c
TestSuite::TestSuite	TestSuite.cpp	/^TestSuite::TestSuite ( ) {$/;"	f	class:TestSuite	signature:( )
TestSuite::TestSuite	TestSuite.h	/^    TestSuite ( );$/;"	p	class:TestSuite	access:public	signature:( )
TestSuite::bashCommand	TestSuite.h	/^    BashCommand *bashCommand;$/;"	m	class:TestSuite	access:private
TestSuite::commandOutput	TestSuite.h	/^    std::string commandOutput;$/;"	m	class:TestSuite	access:private
TestSuite::execute	TestSuite.cpp	/^void TestSuite::execute() {$/;"	f	class:TestSuite	signature:()
TestSuite::execute	TestSuite.h	/^    virtual void execute ( );$/;"	p	class:TestSuite	access:public	signature:( )
TestSuite::suite	TestSuite.h	/^    std::vector<Test *> suite;$/;"	m	class:TestSuite	access:private
TestSuite::~TestSuite	TestSuite.cpp	/^TestSuite::~TestSuite ( ) {$/;"	f	class:TestSuite	signature:( )
TestSuite::~TestSuite	TestSuite.h	/^    virtual ~TestSuite ( );$/;"	p	class:TestSuite	access:public	signature:( )
addPath	Monitor.cpp	/^    this->notifier->addPath ( watchPath );$/;"	p	file:	signature:( watchPath )
addPath	Notifier.cpp	/^void Notifier::addPath ( std::string &path ) {$/;"	f	class:Notifier	signature:( std::string &path )
addPath	Notifier.h	/^    virtual void addPath ( std::string &path );$/;"	p	class:Notifier	access:public	signature:( std::string &path )
bashCommand	Compiler.h	/^    BashCommand *bashCommand;$/;"	m	class:Compiler	access:private
bashCommand	TestSuite.h	/^    BashCommand *bashCommand;$/;"	m	class:TestSuite	access:private
buffer	BashCommand.cpp	/^    char buffer[500];$/;"	l
buffer	Notifier.h	/^    char *buffer;$/;"	m	class:Notifier	access:private
command	BashCommand.h	/^    std::string command;$/;"	m	class:BashCommand	access:private
command	TestSuite.cpp	/^    std::string command = ".\/testautomatictestrunner";$/;"	l
commandOutput	Compiler.cpp	/^    std::string commandOutput;$/;"	l
commandOutput	TestSuite.h	/^    std::string commandOutput;$/;"	m	class:TestSuite	access:private
commands	Compiler.h	/^    std::vector<std::string> commands;$/;"	m	class:Compiler	access:private
compiler	Monitor.h	/^    Compiler *compiler;$/;"	m	class:Monitor	access:private
endl	Monitor.cpp	/^            std::cout << fileModified << " has been modified" << std::endl;$/;"	m	class:std	file:
endl	Notifier.cpp	/^        std::cout << value << std::endl;$/;"	m	class:std	file:
endl	Notifier.cpp	/^    std::cout << "Start watch on " << std::endl;$/;"	m	class:std	file:
event	Notifier.cpp	/^    struct inotify_event *event = ( struct inotify_event * ) &buffer[i];$/;"	l
execute	BashCommand.cpp	/^std::string BashCommand::execute()$/;"	f	class:BashCommand	signature:()
execute	BashCommand.h	/^    virtual std::string  execute();$/;"	p	class:BashCommand	access:public	signature:()
execute	Compiler.cpp	/^void Compiler::execute() {$/;"	f	class:Compiler	signature:()
execute	Compiler.h	/^    virtual void  execute();$/;"	p	class:Compiler	access:public	signature:()
execute	Monitor.cpp	/^            this->compiler->execute();$/;"	p	file:	signature:()
execute	Monitor.cpp	/^            this->testSuite->execute();$/;"	p	file:	signature:()
execute	Test.cpp	/^void Test::execute() {$/;"	f	class:Test	signature:()
execute	Test.h	/^    virtual void execute();$/;"	p	class:Test	access:public	signature:()
execute	TestSuite.cpp	/^void TestSuite::execute() {$/;"	f	class:TestSuite	signature:()
execute	TestSuite.h	/^    virtual void execute ( );$/;"	p	class:TestSuite	access:public	signature:( )
fileDescriptor	Notifier.h	/^    int fileDescriptor;$/;"	m	class:Notifier	access:private
fileModified	Monitor.cpp	/^    std::string fileModified;$/;"	l
i	Notifier.cpp	/^    int i = 0;$/;"	l
initialize	Monitor.cpp	/^    this->notifier->initialize();$/;"	p	file:	signature:()
initialize	Notifier.cpp	/^void Notifier::initialize() {$/;"	f	class:Notifier	signature:()
initialize	Notifier.h	/^    virtual void initialize();$/;"	p	class:Notifier	access:public	signature:()
isValid	Monitor.cpp	/^bool Monitor::isValid() {$/;"	f	class:Monitor	signature:()
isValid	Monitor.h	/^    virtual bool isValid();$/;"	p	class:Monitor	access:public	signature:()
length	Notifier.h	/^    int length;$/;"	m	class:Notifier	access:private
main	main.cpp	/^int main() {$/;"	f	signature:()
monitor	main.cpp	/^    Monitor *monitor = new Monitor ( );$/;"	l
name	Test.h	/^    std::string name;$/;"	m	class:Test	access:private
notifier	Monitor.h	/^    Notifier *notifier;$/;"	m	class:Monitor	access:private
parser	Compiler.h	/^    Parser *parser;$/;"	m	class:Compiler	access:private
paths	Notifier.h	/^    std::vector<std::string> paths;$/;"	m	class:Notifier	access:private
popenOutput	BashCommand.cpp	/^    FILE *popenOutput;$/;"	l
push_back	Notifier.cpp	/^    this->paths.push_back ( path );$/;"	p	file:	signature:( path )
run	Compiler.cpp	/^        this->parser->run();$/;"	p	file:	signature:()
run	Parser.cpp	/^void Parser::run( ) {$/;"	f	class:Parser	signature:( )
run	Parser.h	/^    virtual void run();$/;"	p	class:Parser	access:public	signature:()
startWatch	Monitor.cpp	/^void Monitor::startWatch() {$/;"	f	class:Monitor	signature:()
startWatch	Monitor.h	/^    virtual void startWatch();$/;"	p	class:Monitor	access:public	signature:()
startWatch	main.cpp	/^    monitor->startWatch();$/;"	p	file:	signature:()
status	Test.h	/^    bool status;$/;"	m	class:Test	access:private
std::endl	Monitor.cpp	/^            std::cout << fileModified << " has been modified" << std::endl;$/;"	m	class:std	file:
std::endl	Notifier.cpp	/^        std::cout << value << std::endl;$/;"	m	class:std	file:
std::endl	Notifier.cpp	/^    std::cout << "Start watch on " << std::endl;$/;"	m	class:std	file:
suite	TestSuite.h	/^    std::vector<Test *> suite;$/;"	m	class:TestSuite	access:private
terminate	Monitor.cpp	/^    this->notifier->terminate();$/;"	p	file:	signature:()
terminate	Notifier.cpp	/^void Notifier::terminate() {$/;"	f	class:Notifier	signature:()
terminate	Notifier.h	/^    virtual void terminate();$/;"	p	class:Notifier	access:public	signature:()
testSuite	Monitor.h	/^    TestSuite *testSuite;$/;"	m	class:Monitor	access:private
text	Parser.h	/^    std::string text;$/;"	m	class:Parser	access:private
waitForChange	Notifier.cpp	/^std::string Notifier::waitForChange() {$/;"	f	class:Notifier	signature:()
waitForChange	Notifier.h	/^    std::string waitForChange();$/;"	p	class:Notifier	access:public	signature:()
watchDescriptor	Notifier.h	/^    int watchDescriptor;$/;"	m	class:Notifier	access:private
watchPath	Monitor.cpp	/^    std::string watchPath = "..\/test";$/;"	l
~BashCommand	BashCommand.cpp	/^BashCommand::~BashCommand()$/;"	f	class:BashCommand	signature:()
~BashCommand	BashCommand.h	/^    virtual ~BashCommand();$/;"	p	class:BashCommand	access:public	signature:()
~Compiler	Compiler.cpp	/^Compiler::~Compiler() {$/;"	f	class:Compiler	signature:()
~Compiler	Compiler.h	/^    virtual ~Compiler();$/;"	p	class:Compiler	access:public	signature:()
~Monitor	Monitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:Monitor	signature:()
~Monitor	Monitor.h	/^    virtual ~Monitor();$/;"	p	class:Monitor	access:public	signature:()
~Notifier	Notifier.cpp	/^Notifier::~Notifier() {$/;"	f	class:Notifier	signature:()
~Notifier	Notifier.h	/^    virtual ~Notifier();$/;"	p	class:Notifier	access:public	signature:()
~Parser	Parser.cpp	/^Parser::~Parser( )$/;"	f	class:Parser	signature:( )
~Parser	Parser.h	/^    virtual ~Parser();$/;"	p	class:Parser	access:public	signature:()
~Test	Test.cpp	/^Test::~Test ( ) {$/;"	f	class:Test	signature:( )
~Test	Test.h	/^    virtual ~Test();$/;"	p	class:Test	access:public	signature:()
~TestSuite	TestSuite.cpp	/^TestSuite::~TestSuite ( ) {$/;"	f	class:TestSuite	signature:( )
~TestSuite	TestSuite.h	/^    virtual ~TestSuite ( );$/;"	p	class:TestSuite	access:public	signature:( )
