!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BASHCOMMAND_H	BashCommand.h	21;"	d
BashCommand	BashCommand.cpp	/^BashCommand::BashCommand(Parser *parser) {$/;"	f	class:BashCommand	signature:(Parser *parser)
BashCommand	BashCommand.h	/^    BashCommand(Parser *parser);$/;"	p	class:BashCommand	access:public	signature:(Parser *parser)
BashCommand	BashCommand.h	/^class BashCommand {$/;"	c
BashCommand::BashCommand	BashCommand.cpp	/^BashCommand::BashCommand(Parser *parser) {$/;"	f	class:BashCommand	signature:(Parser *parser)
BashCommand::BashCommand	BashCommand.h	/^    BashCommand(Parser *parser);$/;"	p	class:BashCommand	access:public	signature:(Parser *parser)
BashCommand::execute	BashCommand.cpp	/^void BashCommand::execute(std::string &command) {$/;"	f	class:BashCommand	signature:(std::string &command)
BashCommand::execute	BashCommand.h	/^    virtual void execute(std::string &command);$/;"	p	class:BashCommand	access:public	signature:(std::string &command)
BashCommand::parser	BashCommand.h	/^    Parser *parser;$/;"	m	class:BashCommand	access:private
BashCommand::~BashCommand	BashCommand.cpp	/^BashCommand::~BashCommand() {$/;"	f	class:BashCommand	signature:()
BashCommand::~BashCommand	BashCommand.h	/^    virtual ~BashCommand();$/;"	p	class:BashCommand	access:public	signature:()
COMPILER_H	Compiler.h	21;"	d
Compiler	Compiler.cpp	/^Compiler::Compiler(BashCommand *bashCommand) {$/;"	f	class:Compiler	signature:(BashCommand *bashCommand)
Compiler	Compiler.h	/^    Compiler(BashCommand *bashCommand);$/;"	p	class:Compiler	access:public	signature:(BashCommand *bashCommand)
Compiler	Compiler.h	/^class Compiler {$/;"	c
Compiler::Compiler	Compiler.cpp	/^Compiler::Compiler(BashCommand *bashCommand) {$/;"	f	class:Compiler	signature:(BashCommand *bashCommand)
Compiler::Compiler	Compiler.h	/^    Compiler(BashCommand *bashCommand);$/;"	p	class:Compiler	access:public	signature:(BashCommand *bashCommand)
Compiler::bashCommand	Compiler.h	/^    BashCommand *bashCommand;$/;"	m	class:Compiler	access:private
Compiler::command	Compiler.h	/^    std::string command;$/;"	m	class:Compiler	access:private
Compiler::execute	Compiler.cpp	/^void Compiler::execute() {$/;"	f	class:Compiler	signature:()
Compiler::execute	Compiler.h	/^    virtual void  execute();$/;"	p	class:Compiler	access:public	signature:()
Compiler::~Compiler	Compiler.cpp	/^Compiler::~Compiler() {$/;"	f	class:Compiler	signature:()
Compiler::~Compiler	Compiler.h	/^    virtual ~Compiler();$/;"	p	class:Compiler	access:public	signature:()
EVENT_BUF_LEN	Notifier.h	/^    int EVENT_BUF_LEN;$/;"	m	class:Notifier	access:private
EVENT_SIZE	Notifier.h	/^    int EVENT_SIZE;$/;"	m	class:Notifier	access:private
MONITOR_H	Monitor.h	21;"	d
Monitor	Monitor.cpp	/^Monitor::Monitor(Compiler *compiler, Notifier *notifier, TestRunner *testRunner) {$/;"	f	class:Monitor	signature:(Compiler *compiler, Notifier *notifier, TestRunner *testRunner)
Monitor	Monitor.h	/^    Monitor(Compiler *compiler, Notifier *notifier, TestRunner *testRunner);$/;"	p	class:Monitor	access:public	signature:(Compiler *compiler, Notifier *notifier, TestRunner *testRunner)
Monitor	Monitor.h	/^class Monitor {$/;"	c
Monitor::Monitor	Monitor.cpp	/^Monitor::Monitor(Compiler *compiler, Notifier *notifier, TestRunner *testRunner) {$/;"	f	class:Monitor	signature:(Compiler *compiler, Notifier *notifier, TestRunner *testRunner)
Monitor::Monitor	Monitor.h	/^    Monitor(Compiler *compiler, Notifier *notifier, TestRunner *testRunner);$/;"	p	class:Monitor	access:public	signature:(Compiler *compiler, Notifier *notifier, TestRunner *testRunner)
Monitor::compiler	Monitor.h	/^    Compiler *compiler;$/;"	m	class:Monitor	access:private
Monitor::isValid	Monitor.cpp	/^bool Monitor::isValid() {$/;"	f	class:Monitor	signature:()
Monitor::isValid	Monitor.h	/^    virtual bool isValid();$/;"	p	class:Monitor	access:public	signature:()
Monitor::notifier	Monitor.h	/^    Notifier *notifier;$/;"	m	class:Monitor	access:private
Monitor::startWatch	Monitor.cpp	/^void Monitor::startWatch() {$/;"	f	class:Monitor	signature:()
Monitor::startWatch	Monitor.h	/^    virtual void startWatch();$/;"	p	class:Monitor	access:public	signature:()
Monitor::testRunner	Monitor.h	/^    TestRunner *testRunner;$/;"	m	class:Monitor	access:private
Monitor::~Monitor	Monitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:Monitor	signature:()
Monitor::~Monitor	Monitor.h	/^    virtual ~Monitor();$/;"	p	class:Monitor	access:public	signature:()
NOTIFIER_H	Notifier.h	21;"	d
Notifier	Notifier.cpp	/^Notifier::Notifier() {$/;"	f	class:Notifier	signature:()
Notifier	Notifier.h	/^    Notifier();$/;"	p	class:Notifier	access:public	signature:()
Notifier	Notifier.h	/^class Notifier {$/;"	c
Notifier::EVENT_BUF_LEN	Notifier.h	/^    int EVENT_BUF_LEN;$/;"	m	class:Notifier	access:private
Notifier::EVENT_SIZE	Notifier.h	/^    int EVENT_SIZE;$/;"	m	class:Notifier	access:private
Notifier::Notifier	Notifier.cpp	/^Notifier::Notifier() {$/;"	f	class:Notifier	signature:()
Notifier::Notifier	Notifier.h	/^    Notifier();$/;"	p	class:Notifier	access:public	signature:()
Notifier::addPaths	Notifier.cpp	/^void Notifier::addPaths(std::vector<std::string> &paths) {$/;"	f	class:Notifier	signature:(std::vector<std::string> &paths)
Notifier::addPaths	Notifier.h	/^    virtual void addPaths(std::vector<std::string> &paths);$/;"	p	class:Notifier	access:public	signature:(std::vector<std::string> &paths)
Notifier::buffer	Notifier.h	/^    char *buffer;$/;"	m	class:Notifier	access:private
Notifier::fileDescriptor	Notifier.h	/^    int fileDescriptor;$/;"	m	class:Notifier	access:private
Notifier::initialize	Notifier.cpp	/^void Notifier::initialize() {$/;"	f	class:Notifier	signature:()
Notifier::initialize	Notifier.h	/^    virtual void initialize();$/;"	p	class:Notifier	access:public	signature:()
Notifier::length	Notifier.h	/^    int length;$/;"	m	class:Notifier	access:private
Notifier::paths	Notifier.h	/^    std::vector<std::string> paths;$/;"	m	class:Notifier	access:private
Notifier::terminate	Notifier.cpp	/^void Notifier::terminate() {$/;"	f	class:Notifier	signature:()
Notifier::terminate	Notifier.h	/^    virtual void terminate();$/;"	p	class:Notifier	access:public	signature:()
Notifier::waitForChange	Notifier.cpp	/^std::string Notifier::waitForChange() {$/;"	f	class:Notifier	signature:()
Notifier::waitForChange	Notifier.h	/^    std::string waitForChange();$/;"	p	class:Notifier	access:public	signature:()
Notifier::watchDescriptor	Notifier.h	/^    int watchDescriptor;$/;"	m	class:Notifier	access:private
Notifier::~Notifier	Notifier.cpp	/^Notifier::~Notifier() {$/;"	f	class:Notifier	signature:()
Notifier::~Notifier	Notifier.h	/^    virtual ~Notifier();$/;"	p	class:Notifier	access:public	signature:()
PARSER_H	Parser.h	21;"	d
Parser	Parser.cpp	/^Parser::Parser ( ) {$/;"	f	class:Parser	signature:( )
Parser	Parser.h	/^    Parser();$/;"	p	class:Parser	access:public	signature:()
Parser	Parser.h	/^class Parser {$/;"	c
Parser::Parser	Parser.cpp	/^Parser::Parser ( ) {$/;"	f	class:Parser	signature:( )
Parser::Parser	Parser.h	/^    Parser();$/;"	p	class:Parser	access:public	signature:()
Parser::parseOutput	Parser.cpp	/^void Parser::parseOutput(FILE *file) {$/;"	f	class:Parser	signature:(FILE *file)
Parser::parseOutput	Parser.h	/^    virtual void parseOutput(FILE *file);$/;"	p	class:Parser	access:public	signature:(FILE *file)
Parser::~Parser	Parser.cpp	/^Parser::~Parser( ) {$/;"	f	class:Parser	signature:( )
Parser::~Parser	Parser.h	/^    virtual ~Parser();$/;"	p	class:Parser	access:public	signature:()
TESTRUNNER_H	TestRunner.h	21;"	d
TestRunner	TestRunner.cpp	/^TestRunner::TestRunner(BashCommand *bashCommand) {$/;"	f	class:TestRunner	signature:(BashCommand *bashCommand)
TestRunner	TestRunner.h	/^    TestRunner(BashCommand *bashCommand);$/;"	p	class:TestRunner	access:public	signature:(BashCommand *bashCommand)
TestRunner	TestRunner.h	/^class TestRunner {$/;"	c
TestRunner::TestRunner	TestRunner.cpp	/^TestRunner::TestRunner(BashCommand *bashCommand) {$/;"	f	class:TestRunner	signature:(BashCommand *bashCommand)
TestRunner::TestRunner	TestRunner.h	/^    TestRunner(BashCommand *bashCommand);$/;"	p	class:TestRunner	access:public	signature:(BashCommand *bashCommand)
TestRunner::bashCommand	TestRunner.h	/^    BashCommand *bashCommand;$/;"	m	class:TestRunner	access:private
TestRunner::command	TestRunner.h	/^    std::string command;$/;"	m	class:TestRunner	access:private
TestRunner::execute	TestRunner.cpp	/^void TestRunner::execute() {$/;"	f	class:TestRunner	signature:()
TestRunner::execute	TestRunner.h	/^    virtual void execute();$/;"	p	class:TestRunner	access:public	signature:()
TestRunner::~TestRunner	TestRunner.cpp	/^TestRunner::~TestRunner() {$/;"	f	class:TestRunner	signature:()
TestRunner::~TestRunner	TestRunner.h	/^    virtual ~TestRunner();$/;"	p	class:TestRunner	access:public	signature:()
addPaths	Notifier.cpp	/^void Notifier::addPaths(std::vector<std::string> &paths) {$/;"	f	class:Notifier	signature:(std::vector<std::string> &paths)
addPaths	Notifier.h	/^    virtual void addPaths(std::vector<std::string> &paths);$/;"	p	class:Notifier	access:public	signature:(std::vector<std::string> &paths)
addPaths	main.cpp	/^    notifier->addPaths (watchPaths);$/;"	p	file:	signature:(watchPaths)
bashCommand	Compiler.h	/^    BashCommand *bashCommand;$/;"	m	class:Compiler	access:private
bashCommand	TestRunner.h	/^    BashCommand *bashCommand;$/;"	m	class:TestRunner	access:private
bashCommand	main.cpp	/^    BashCommand *bashCommand = new BashCommand(parser);$/;"	l
buffer	Notifier.h	/^    char *buffer;$/;"	m	class:Notifier	access:private
command	Compiler.h	/^    std::string command;$/;"	m	class:Compiler	access:private
command	TestRunner.h	/^    std::string command;$/;"	m	class:TestRunner	access:private
compiler	Monitor.h	/^    Compiler *compiler;$/;"	m	class:Monitor	access:private
compiler	main.cpp	/^    Compiler *compiler = new Compiler(bashCommand);$/;"	l
currentString	Parser.cpp	/^    std::string currentString;$/;"	l
endl	Monitor.cpp	/^        std::cout << fileModified << " has been modified" << std::endl;$/;"	m	class:std	file:
endl	Notifier.cpp	/^        std::cout << value << std::endl;$/;"	m	class:std	file:
endl	Notifier.cpp	/^    std::cout << "Start watch on " << std::endl;$/;"	m	class:std	file:
endl	Parser.cpp	/^    std::cout << "Output Parser" << std::endl;$/;"	m	class:std	file:
endl	Parser.cpp	/^    std::cout << "String is: " << std::endl;$/;"	m	class:std	file:
endl	Parser.cpp	/^    std::cout << currentString << std::endl;$/;"	m	class:std	file:
endl	TestRunner.cpp	/^    std::cout << "Running all tests" << std::endl;$/;"	m	class:std	file:
event	Notifier.cpp	/^    struct inotify_event *event = ( struct inotify_event * ) &buffer[i];$/;"	l
execute	BashCommand.cpp	/^void BashCommand::execute(std::string &command) {$/;"	f	class:BashCommand	signature:(std::string &command)
execute	BashCommand.h	/^    virtual void execute(std::string &command);$/;"	p	class:BashCommand	access:public	signature:(std::string &command)
execute	Compiler.cpp	/^    this->bashCommand->execute(this->command);$/;"	p	file:	signature:(this->command)
execute	Compiler.cpp	/^void Compiler::execute() {$/;"	f	class:Compiler	signature:()
execute	Compiler.h	/^    virtual void  execute();$/;"	p	class:Compiler	access:public	signature:()
execute	Monitor.cpp	/^        this->compiler->execute();$/;"	p	file:	signature:()
execute	Monitor.cpp	/^        this->testRunner->execute();$/;"	p	file:	signature:()
execute	TestRunner.cpp	/^    this->bashCommand->execute(this->command);$/;"	p	file:	signature:(this->command)
execute	TestRunner.cpp	/^void TestRunner::execute() {$/;"	f	class:TestRunner	signature:()
execute	TestRunner.h	/^    virtual void execute();$/;"	p	class:TestRunner	access:public	signature:()
fileDescriptor	Notifier.h	/^    int fileDescriptor;$/;"	m	class:Notifier	access:private
fileModified	Monitor.cpp	/^    std::string fileModified;$/;"	l
i	Notifier.cpp	/^    int i = 0;$/;"	l
initialize	Notifier.cpp	/^void Notifier::initialize() {$/;"	f	class:Notifier	signature:()
initialize	Notifier.h	/^    virtual void initialize();$/;"	p	class:Notifier	access:public	signature:()
initialize	main.cpp	/^    notifier->initialize();$/;"	p	file:	signature:()
isValid	Monitor.cpp	/^bool Monitor::isValid() {$/;"	f	class:Monitor	signature:()
isValid	Monitor.h	/^    virtual bool isValid();$/;"	p	class:Monitor	access:public	signature:()
length	Notifier.h	/^    int length;$/;"	m	class:Notifier	access:private
main	main.cpp	/^int main( ) {$/;"	f	signature:( )
monitor	main.cpp	/^    Monitor *monitor = new Monitor(compiler, notifier, testRunner);$/;"	l
notifier	Monitor.h	/^    Notifier *notifier;$/;"	m	class:Monitor	access:private
notifier	main.cpp	/^    Notifier *notifier = new Notifier();$/;"	l
parseOutput	BashCommand.cpp	/^    this->parser->parseOutput(popenOutput);$/;"	p	file:	signature:(popenOutput)
parseOutput	Parser.cpp	/^void Parser::parseOutput(FILE *file) {$/;"	f	class:Parser	signature:(FILE *file)
parseOutput	Parser.h	/^    virtual void parseOutput(FILE *file);$/;"	p	class:Parser	access:public	signature:(FILE *file)
parser	BashCommand.h	/^    Parser *parser;$/;"	m	class:BashCommand	access:private
parser	main.cpp	/^    Parser *parser = new Parser();$/;"	l
paths	Notifier.h	/^    std::vector<std::string> paths;$/;"	m	class:Notifier	access:private
popenOutput	BashCommand.cpp	/^    FILE *popenOutput;$/;"	l
startWatch	Monitor.cpp	/^void Monitor::startWatch() {$/;"	f	class:Monitor	signature:()
startWatch	Monitor.h	/^    virtual void startWatch();$/;"	p	class:Monitor	access:public	signature:()
startWatch	main.cpp	/^    monitor->startWatch();$/;"	p	file:	signature:()
std::endl	Monitor.cpp	/^        std::cout << fileModified << " has been modified" << std::endl;$/;"	m	class:std	file:
std::endl	Notifier.cpp	/^        std::cout << value << std::endl;$/;"	m	class:std	file:
std::endl	Notifier.cpp	/^    std::cout << "Start watch on " << std::endl;$/;"	m	class:std	file:
std::endl	Parser.cpp	/^    std::cout << "Output Parser" << std::endl;$/;"	m	class:std	file:
std::endl	Parser.cpp	/^    std::cout << "String is: " << std::endl;$/;"	m	class:std	file:
std::endl	Parser.cpp	/^    std::cout << currentString << std::endl;$/;"	m	class:std	file:
std::endl	TestRunner.cpp	/^    std::cout << "Running all tests" << std::endl;$/;"	m	class:std	file:
string	Parser.cpp	/^        currentString.append( std::string(valueToWrite) );$/;"	p	file:	signature:(valueToWrite)
terminate	Monitor.cpp	/^    this->notifier->terminate();$/;"	p	file:	signature:()
terminate	Notifier.cpp	/^void Notifier::terminate() {$/;"	f	class:Notifier	signature:()
terminate	Notifier.h	/^    virtual void terminate();$/;"	p	class:Notifier	access:public	signature:()
testRunner	Monitor.h	/^    TestRunner *testRunner;$/;"	m	class:Monitor	access:private
testRunner	main.cpp	/^    TestRunner *testRunner = new TestRunner(bashCommand);$/;"	l
testValue	Parser.cpp	/^    int testValue;$/;"	l
valueToWrite	Parser.cpp	/^    char valueToWrite[100];$/;"	l
waitForChange	Notifier.cpp	/^std::string Notifier::waitForChange() {$/;"	f	class:Notifier	signature:()
waitForChange	Notifier.h	/^    std::string waitForChange();$/;"	p	class:Notifier	access:public	signature:()
watchDescriptor	Notifier.h	/^    int watchDescriptor;$/;"	m	class:Notifier	access:private
watchPaths	main.cpp	/^    std::vector<std::string> watchPaths;$/;"	l
~BashCommand	BashCommand.cpp	/^BashCommand::~BashCommand() {$/;"	f	class:BashCommand	signature:()
~BashCommand	BashCommand.h	/^    virtual ~BashCommand();$/;"	p	class:BashCommand	access:public	signature:()
~Compiler	Compiler.cpp	/^Compiler::~Compiler() {$/;"	f	class:Compiler	signature:()
~Compiler	Compiler.h	/^    virtual ~Compiler();$/;"	p	class:Compiler	access:public	signature:()
~Monitor	Monitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:Monitor	signature:()
~Monitor	Monitor.h	/^    virtual ~Monitor();$/;"	p	class:Monitor	access:public	signature:()
~Notifier	Notifier.cpp	/^Notifier::~Notifier() {$/;"	f	class:Notifier	signature:()
~Notifier	Notifier.h	/^    virtual ~Notifier();$/;"	p	class:Notifier	access:public	signature:()
~Parser	Parser.cpp	/^Parser::~Parser( ) {$/;"	f	class:Parser	signature:( )
~Parser	Parser.h	/^    virtual ~Parser();$/;"	p	class:Parser	access:public	signature:()
~TestRunner	TestRunner.cpp	/^TestRunner::~TestRunner() {$/;"	f	class:TestRunner	signature:()
~TestRunner	TestRunner.h	/^    virtual ~TestRunner();$/;"	p	class:TestRunner	access:public	signature:()
